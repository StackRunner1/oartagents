'use client';
import React, { useState } from 'react';

// Simple SDK session test UI that does NOT touch existing realtime UI
// Provides: create session, send message, view transcript

interface TranscriptItem {
  id?: string;
  type?: string;
  [k: string]: any;
}

export default function SDKTestPage() {
  const [sessionId, setSessionId] = useState<string>('');
  const [agentName, setAgentName] = useState('assistant');
  const [instructions, setInstructions] = useState(
    'You are a concise assistant. Keep answers short.'
  );
  const [model, setModel] = useState('gpt-4.1-mini');
  const [input, setInput] = useState('Hello!');
  const [output, setOutput] = useState<string>('');
  const [toolCalls, setToolCalls] = useState<string[]>([]);
  const [transcript, setTranscript] = useState<TranscriptItem[]>([]);
  const [loading, setLoading] = useState(false);
  const [baseUrl, setBaseUrl] = useState('http://localhost:8000');

  async function createSession() {
    setLoading(true);
    try {
      const res = await fetch(`${baseUrl}/api/sdk/session/create`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          session_id: sessionId || undefined,
          agent_name: agentName,
          instructions,
          model,
        }),
      });
      if (!res.ok) throw new Error(await res.text());
      const data = await res.json();
      setSessionId(data.session_id);
    } catch (e: any) {
      alert('Create failed: ' + e.message);
    } finally {
      setLoading(false);
    }
  }

  async function sendMessage() {
    if (!sessionId) {
      alert('Create session first');
      return;
    }
    setLoading(true);
    try {
      const res = await fetch(`${baseUrl}/api/sdk/session/message`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ session_id: sessionId, user_input: input }),
      });
      if (!res.ok) throw new Error(await res.text());
      const data = await res.json();
      setOutput(data.final_output);
      setToolCalls(data.tool_calls || []);
    } catch (e: any) {
      alert('Message failed: ' + e.message);
    } finally {
      setLoading(false);
    }
  }

  async function loadTranscript() {
    if (!sessionId) {
      alert('Create session first');
      return;
    }
    setLoading(true);
    try {
      const res = await fetch(
        `${baseUrl}/api/sdk/session/transcript?session_id=${encodeURIComponent(
          sessionId
        )}`
      );
      if (!res.ok) throw new Error(await res.text());
      const data = await res.json();
      setTranscript(data.items || []);
    } catch (e: any) {
      alert('Transcript failed: ' + e.message);
    } finally {
      setLoading(false);
    }
  }

  return (
    <div
      style={{
        fontFamily: 'sans-serif',
        padding: 24,
        maxWidth: 900,
        margin: '0 auto',
      }}>
      <h1>SDK Session Test</h1>
      <p style={{ fontSize: 14, opacity: 0.8 }}>
        Isolated test harness for server-side Agents SDK endpoints.
      </p>
      <section
        style={{
          display: 'grid',
          gap: 12,
          gridTemplateColumns: 'repeat(auto-fit, minmax(240px, 1fr))',
        }}>
        <label style={{ display: 'flex', flexDirection: 'column', gap: 4 }}>
          Base URL
          <input
            value={baseUrl}
            onChange={(e) => setBaseUrl(e.target.value)}
            placeholder="http://localhost:8000"
          />
        </label>
        <label style={{ display: 'flex', flexDirection: 'column', gap: 4 }}>
          Session ID (optional)
          <input
            value={sessionId}
            onChange={(e) => setSessionId(e.target.value)}
            placeholder="(autogenerated)"
          />
        </label>
        <label style={{ display: 'flex', flexDirection: 'column', gap: 4 }}>
          Agent Name
          <input
            value={agentName}
            onChange={(e) => setAgentName(e.target.value)}
          />
        </label>
        <label style={{ display: 'flex', flexDirection: 'column', gap: 4 }}>
          Model
          <input value={model} onChange={(e) => setModel(e.target.value)} />
        </label>
      </section>
      <label
        style={{
          display: 'flex',
          flexDirection: 'column',
          gap: 4,
          marginTop: 12,
        }}>
        Instructions
        <textarea
          value={instructions}
          onChange={(e) => setInstructions(e.target.value)}
          rows={3}
        />
      </label>
      <div style={{ marginTop: 12, display: 'flex', gap: 8 }}>
        <button onClick={createSession} disabled={loading}>
          Create / Reuse Session
        </button>
        <button onClick={loadTranscript} disabled={loading || !sessionId}>
          Load Transcript
        </button>
      </div>
      <hr style={{ margin: '24px 0' }} />
      <h2>Send Message</h2>
      <div style={{ display: 'flex', flexDirection: 'column', gap: 8 }}>
        <textarea
          rows={2}
          value={input}
          onChange={(e) => setInput(e.target.value)}
        />
        <button onClick={sendMessage} disabled={loading || !sessionId}>
          Send
        </button>
      </div>
      {output && (
        <div style={{ marginTop: 16 }}>
          <h3>Final Output</h3>
          <div
            style={{
              background: '#111',
              color: '#eee',
              padding: 12,
              whiteSpace: 'pre-wrap',
              borderRadius: 4,
            }}>
            {output}
          </div>
        </div>
      )}
      {toolCalls.length > 0 && (
        <div style={{ marginTop: 16 }}>
          <h3>Tool Calls</h3>
          <ul>
            {toolCalls.map((t, i) => (
              <li key={i}>{t}</li>
            ))}
          </ul>
        </div>
      )}
      <div style={{ marginTop: 32 }}>
        <h2>Transcript ({transcript.length})</h2>
        <button onClick={loadTranscript} disabled={loading || !sessionId}>
          Refresh
        </button>
        <ol style={{ fontSize: 13, marginTop: 12, paddingLeft: 20 }}>
          {transcript.map((item, idx) => (
            <li key={idx} style={{ marginBottom: 8 }}>
              <code style={{ fontSize: 12 }}>{item.type}</code>:{' '}
              {JSON.stringify(item).slice(0, 240)}
            </li>
          ))}
        </ol>
      </div>
    </div>
  );
}
